
Lo primero es levantar Kafka y para ello usamos el docker-compose que hemos creado para ello. Dentro de este archivo hemos definido:
- El zookeeper que es para el gobierno de los distintos brokers (creo)
- El broker de Kafka como tal
- Y la red privada que va a usar internamente en el docker compose

# Run broker
1. docker-compose -f docker-compose.kafka.yml up

------------------------------------------------------------------------------------------------------------------------
Después hemos creado una carpeta para el productor y otra para el consumidor, con sus correspondientes Dockerfile. Ahí, le indicamos que deben hacer, es decir, instalar los requirements.txt, levantar app.py, etc ...

# Run App: generator y detector
2. docker-compose up
# Si cambias algo del código tienes que usar para que se vea reflejado:
2. Docker-compose up --build

------------------------------------------------------------------------------------------------------------------------
Para poder ver los logs de cada topic debemos usar las siguientes lineas de comando:

# It allows you to read and print the contents of a topic to the console.
3. docker-compose -f docker-compose.kafka.yml exec broker kafka-console-consumer --bootstrap-server localhost:9092 --topic queueing.transactions --from-beginning
 
# It allows you to read and print the contents of a topic LEGIT
4. docker-compose -f docker-compose.kafka.yml exec broker kafka-console-consumer --bootstrap-server localhost:9092 --topic streaming.transactions.legit

# It allows you to read and print the contents of a topic FRAUD
5. docker-compose -f docker-compose.kafka.yml exec broker kafka-console-consumer --bootstrap-server localhost:9092 --topic streaming.transactions.fraud

-----------------------------------------------------------------------------------------------------------------------
OPTIONAL

####### DELETE IMAGES
docker rm -f $(docker ps -aq) >/dev/null 2>&1 || true

## To delete one file from the git history
# -> git filter-branch --force --index-filter "git rm --cached --ignore-unmatch .env" --prune-empty --tag-name-filter cat -- --all
# -> git push origin --force --all

------------------------------------------------------------------------------------------------------------------------
GOOGLE CLOUD

# -> When kafka instance in GCL says: "Set config.project" - gcloud config set project coronavirus-twitter-realtime

###############################################################
KAFKA
###############################################################

# Create Kafka from Martketplace
# -> https://kaazing.com/kafka-web-streaming-with-the-google-cloud-platform-and-kaazing-io/

# Muchas veces falla porque no tiene los puertos abiertos - chequea los firewalls
# 2- How add firewall in google cloud
# -> gcloud compute firewall-rules create allow-node-api --description "node api channel" --allow tcp:2181
# -> gcloud compute firewall-rules create allow-node-api-2 --description "node api channel" --allow tcp:9092

# -> KAFKA_HOME="/opt/kafka"
# -> KAFKA_BIN="${KAFKA_HOME}/bin"
# -> $KAFKA_HOME/bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic queueing.twt_coord

# -> Create Topic - https://sookocheff.com/post/kafka/deploying-kafka-to-gce/
# -> List topics: ${KAFKA_BIN}/kafka-topics.sh --list --zookeeper localhost:2181

# Ver mensajes de un topic
# -> ${KAFKA_BIN}/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic queueing.twt_coord

###############################################################
KUBERNETES CLUSTER FOR PRODUCER
###############################################################

# -> Para desplegar un cluster
# gcloud container clusters create twitter-realtime-producer-kb --num-nodes 2 --machine-type g1-small --region europe-north1

###############################################################
SUBIR IMAGENES DOCKER A REGISTRY
###############################################################

# -> Damos permisos a gcloud para que acceda a docker
# gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://eu.gcr.io

# -> Para tagear una imagen de docker
# docker tag twitterkafka_twitter_stream:latest eu.gcr.io/coronavirus-twitter-realtime/twitterkafka_twitter_stream:latest

# -> Para push imagen de docker a GoogleCloud
# docker push eu.gcr.io/coronavirus-twitter-realtime/twitterkafka_twitter_stream:latest

###############################################################
DESPLEGAR CONSUMER IN COMPUTER ENGINE
###############################################################

# 3. Deploy Twitter-Consumer in a VM in Computer Engine
# https://www.markusdosch.com/2019/03/how-to-deploy-a-python-flask-application-to-the-web-with-google-cloud-platform-for-free/

------------------------------------------------------------------------------------------------------------------------